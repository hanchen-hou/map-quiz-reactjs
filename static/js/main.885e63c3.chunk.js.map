{"version":3,"sources":["components/AnswerBox.js","components/AnswerBoard.js","components/Area.js","components/Map.js","components/ResultBoard.js","components/App.js","index.js"],"names":["AnswerBox","className","type","placeholder","this","props","index","style","isOnFocus","background","selectedBgColor","onFocus","onFocusFunc","onChange","onChangeFunc","React","Component","AnswerBoard","handleSubmit","bind","textInputOnFocusFunction","testInputOnChangeFunction","setState","currentSelectedIndex","event","answerSheet","target","value","preventDefault","isSubmitted","onSubmit","areaData","answerBoxes","i","length","id","abbreviation","push","key","apply","Area","graphData","fill","color","d","paths","dataSet","Map","getAreas","areaComponents","defaultColor","state","selectedColor","answeredColor","svg","xmlns","version","viewBox","ResultBoard","getOnHoverFunction","str1","str2","trim","toLowerCase","results","filledAnswer","correctAnswer","filledStr","correctStr","onMouseEnter","compare","correctMark","incorrectMark","getResults","App","privinceData","MapDataJson","provinces","Array","updateState","correctAnswers","forEach","data","name","obj","board","country","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.885e63c3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './AnswerBox.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class AnswerBox extends React.Component{\r\n    static selectedBgColor = \"#ffffdd\";\r\n    static className = \"answer-box\";\r\n    \r\n    static propTypes = {\r\n        index: PropTypes.number,\r\n        isOnFocus: PropTypes.bool,\r\n        onFocusFunc: PropTypes.func,\r\n        onChangeFunc: PropTypes.func\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <input className={AnswerBox.className} type=\"text\" placeholder={this.props.index+1}\r\n                   style={ this.props.isOnFocus ? { background: AnswerBox.selectedBgColor} : {}}\r\n                   onFocus={this.props.onFocusFunc}\r\n                   onChange={this.props.onChangeFunc}\r\n            />\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './AnswerBoard.css';\r\nimport PropTypes from \"prop-types\";\r\nimport AnswerBox from \"./AnswerBox\";\r\n\r\nexport default class AnswerBoard extends React.Component{\r\n    static className = \"answer-board\";\r\n    \r\n    static propTypes = {\r\n        areaData: PropTypes.array.isRequired,\r\n        currentSelectedIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n        answerSheet: PropTypes.array.isRequired,\r\n        \r\n        setState: PropTypes.func\r\n    };\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.textInputOnFocusFunction = this.textInputOnFocusFunction.bind(this);\r\n        this.testInputOnChangeFunction = this.testInputOnChangeFunction.bind(this);\r\n    }\r\n    \r\n    textInputOnFocusFunction(index) {\r\n        return () => {\r\n            this.props.setState({currentSelectedIndex: index});\r\n        }\r\n    }\r\n    \r\n    testInputOnChangeFunction(index) {\r\n        return (event) => {\r\n            let answerSheet = this.props.answerSheet;\r\n            answerSheet[index] = event.target.value;\r\n            this.props.setState({answerSheet: answerSheet});\r\n        }\r\n    }\r\n    \r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.props.setState({isSubmitted: true});\r\n    }\r\n    \r\n    render(){\r\n        // generate answer boxes from data\r\n        function getAnswerBoxes() {\r\n            let areaData = this.props.areaData;\r\n            let currentSelectedIndex = this.props.currentSelectedIndex;\r\n            let answerBoxes = [];\r\n            for(let i = 0; i < areaData.length; i++){\r\n                let id = areaData[i].abbreviation;\r\n                answerBoxes.push(\r\n                    <li key={id}>\r\n                        <AnswerBox index={i}\r\n                                   isOnFocus={i === currentSelectedIndex}\r\n                                   onFocusFunc={this.textInputOnFocusFunction(i)}\r\n                                   onChangeFunc={this.testInputOnChangeFunction(i)}\r\n                        />\r\n                    </li>\r\n                )\r\n            }\r\n            return answerBoxes;\r\n        }\r\n        \r\n        return (\r\n            <div className={AnswerBoard.className}>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <ul>\r\n                        {getAnswerBoxes.apply(this)}\r\n                    </ul>\r\n                    <button>Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Area.css';\r\n\r\nexport default class Area extends React.Component {\r\n    static propTypes = {\r\n        graphData: PropTypes.array,\r\n        color: PropTypes.string,\r\n    };\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n    render() {\r\n        if (this.props.graphData === null || this.props.graphData.length === 0) return null;\r\n    \r\n        const style = {\r\n            fill: this.props.color,\r\n        }\r\n        \r\n        if(this.props.graphData.length === 0){\r\n            return null;\r\n        } else if (this.props.graphData.length === 1) {\r\n            return <path d={this.props.graphData[0]} style={style}/>;\r\n        } else {\r\n            function getPaths(){\r\n                let paths = [];\r\n                let dataSet = this.props.graphData;\r\n                for(let i = 0; i < dataSet.length; i++){\r\n                    paths.push(<path key={i} d={dataSet[i]}/>);\r\n                }\r\n                return paths\r\n            }\r\n            \r\n            return (\r\n                <g style={style}>\r\n                    {getPaths.apply(this)}\r\n                </g>\r\n            )\r\n        }\r\n        \r\n    }\r\n}","import React from 'react';\r\nimport './Map.css';\r\nimport Area from \"./Area\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class Map extends React.Component {\r\n    static className = \"map-data\";\r\n    \r\n    static defaultColor = \"#ffffff\";\r\n    static selectedColor = \"#d4ecea\";\r\n    static answeredColor = \"#e0e3ec\";\r\n    // static answeredColor = \"#edd5e3\";\r\n    \r\n    static propTypes = {\r\n        areaData: PropTypes.array,\r\n        viewBox: PropTypes.string,\r\n        state: PropTypes.object,\r\n    };\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.getAreas = this.getAreas.bind(this);\r\n    }\r\n    \r\n    getAreas(){\r\n        let areaComponents = [];\r\n        let areaData = this.props.areaData;\r\n        for(let i = 0; i < areaData.length; i++){\r\n            const abbreviation = areaData[i].abbreviation;\r\n    \r\n            let color = Map.defaultColor;\r\n            if(this.props.state.currentSelectedIndex === i){\r\n                color = Map.selectedColor;\r\n            } else if(this.props.state.answerSheet[i]){\r\n                color = Map.answeredColor;\r\n            }\r\n    \r\n            areaComponents.push(<Area key={abbreviation} graphData={areaData[i].svg} color={color}/>)\r\n        }\r\n        return areaComponents;\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className={Map.className}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" viewBox={this.props.viewBox}>\r\n                    <g>\r\n                        {this.getAreas()}\r\n                    </g>\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './ResultBoard.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class ResultBoard extends React.Component {\r\n    static className = \"result-board\";\r\n    \r\n    static correctMark = \"✔\";\r\n    static incorrectMark = \"❌\";\r\n    \r\n    static propTypes = {\r\n        filledAnswer: PropTypes.array.isRequired,\r\n        correctAnswer: PropTypes.array.isRequired,\r\n    \r\n        setState: PropTypes.func.isRequired\r\n    }\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.getOnHoverFunction = this.getOnHoverFunction.bind(this);\r\n    }\r\n    \r\n    getOnHoverFunction(index){\r\n        return (event) => {\r\n            this.props.setState({currentSelectedIndex: index});\r\n        }\r\n    }\r\n    \r\n    compare(str1, str2) {\r\n        return str1.trim().toLowerCase() === str2.trim().toLowerCase();\r\n    }\r\n    \r\n    getResults() {\r\n        let results = [];\r\n        for (let i = 0; i < this.props.filledAnswer.length && i < this.props.correctAnswer.length; i++) {\r\n            let filledStr = this.props.filledAnswer[i];\r\n            let correctStr = this.props.correctAnswer[i];\r\n            results.push(\r\n                <li key={i}>\r\n                    <p onMouseEnter={this.getOnHoverFunction(i)}>{filledStr} {this.compare(filledStr, correctStr) ? ResultBoard.correctMark : ResultBoard.incorrectMark}</p>\r\n                </li>\r\n            )\r\n        }\r\n        return results;\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className={ResultBoard.className}>\r\n                <ul>\r\n                    {this.getResults()}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport AnswerBoard from \"./AnswerBoard\";\r\nimport Map from \"./Map\";\r\nimport ResultBoard from \"./ResultBoard\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class App extends React.Component {\r\n    static className = \"app\";\r\n    \r\n    static propTypes = {\r\n        MapDataJson: PropTypes.object\r\n    };\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        let privinceData = this.props.MapDataJson.provinces;\r\n        \r\n        this.state = {\r\n            isSubmitted: false,\r\n            currentSelectedIndex: \"\",\r\n            answerSheet: Array(privinceData.length).fill(\"\")\r\n        }\r\n        \r\n        this.updateState = this.updateState.bind(this);\r\n    \r\n        // generate correct answer sheet\r\n        this.correctAnswers = [];\r\n        privinceData.forEach((data) => {\r\n            this.correctAnswers.push(data.name);\r\n        });\r\n    }\r\n    \r\n    updateState(obj) {\r\n        this.setState(obj);\r\n    }\r\n    \r\n    render() {\r\n        let board;\r\n        if (this.state.isSubmitted) {\r\n            board = <ResultBoard setState={this.updateState}\r\n                                 filledAnswer={this.state.answerSheet}\r\n                                 correctAnswer={this.correctAnswers}/>\r\n        } else {\r\n            board = <AnswerBoard areaData={this.props.MapDataJson.provinces}\r\n                                 setState={this.updateState}\r\n                                 currentSelectedIndex={this.state.currentSelectedIndex}\r\n                                 answerSheet={this.state.answerSheet}/>\r\n        }\r\n        \r\n        return (\r\n            <div className={App.className}>\r\n                <h2>{this.props.MapDataJson.country}</h2>\r\n                <p>Please put the full name of each province into the textbox.</p>\r\n                <Map areaData={this.props.MapDataJson.provinces} viewBox={this.props.MapDataJson.viewBox} state={this.state}/>\r\n                {board}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport MapDataJson from \"./data/canada_province_data\";\r\n\r\nReactDOM.render(<App MapDataJson={MapDataJson}/>, document.getElementById('root'));\r\n"],"sourceRoot":""}